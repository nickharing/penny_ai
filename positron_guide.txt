Positron IDE: Python User Guide & Reference (v1.0 - May 2025)

This document provides a guide and quick reference for using Positron IDE for Python development.

1. Introduction to Positron for Python Users

What it is: A modern data science IDE from Posit, built on Visual Studio Code's core (Code OSS). It combines VS Code's powerful editor and extensibility with RStudio-like interactive data science features.
Key Python Benefits:
First-class Python support (alongside R).
Integrated interactive Python console (REPL).
Built-in Data Explorer for Pandas DataFrames.
Dedicated Plots pane for visualizations.
Seamlessly switch between Python and R work.
Extensibility: Supports VS Code-compatible extensions from the OpenVSX marketplace.
Note: Core Python (and R) language support is built-in. You should not install the standard Microsoft Python extension, as Positron provides its own enhanced version.
Current Status: Public Beta (as of May 2025). Features are generally stable but evolving.
2. Getting Started & Setup

Installation: Download from positron.posit.co for Windows, macOS, or Linux.
Python Prerequisites:
Requires Python 3.9 to 3.13. You must install Python separately (e.g., from python.org, Anaconda, Homebrew). pyenv is recommended for managing multiple Python versions.
On Linux with pyenv, ensure Python build dependencies (like libsqlite3-dev) are installed.
IPython Kernel:
Required for the Python console. Positron bundles ipykernel for standard CPython.
If using a different Python implementation or a bare virtual environment, Positron may prompt you to install ipykernel, or you can install it manually (pip install ipykernel).
First Launch & Interpreter Selection:
Positron attempts to auto-detect and activate a suitable Python interpreter.
You can easily switch interpreters using the chooser in the top-right of the console pane or via the Command Palette (Ctrl+Shift+P or Cmd+Shift+P) by searching for "Python: Select Interpreter".
3. Project Management with Python

Concept: Positron uses a directory-based workspace model, similar to VS Code. A "project" is typically a folder on your disk. No proprietary project file (like .Rproj) is strictly required for Python projects.
Creating a New Python Project:
Use the "New Project" wizard (from Welcome Screen or Command Palette: "Create New Project").
Select "Python Project," choose/create a directory.
The wizard may offer to initialize a Git repository and help select a Python environment.
Opening Existing Projects/Folders:
File > Open Folder... or Ctrl+K Ctrl+O (Cmd+K Cmd+O on Mac).
"Clone Repository" from Welcome Screen or Source Control view for Git-hosted projects.
Project-Specific Settings:
Customize settings (e.g., Python interpreter, linter preferences) for a specific project.
These are saved in a .vscode/settings.json file within your project folder.
Managing Python Environments within a Project:
Use the interpreter chooser (ellipsis ... next to the Python version in the console pane's top bar) to select from detected environments (system Python, venv, Conda, pyenv).
The chosen interpreter becomes active for the current workspace's console and script execution.
4. Developing Python Code

Code Editor: Full VS Code editor features:
IntelliSense (autocompletion, signature help, go to definition).
Built-in linting and error highlighting.
Formatting (configurable, e.g., with Black via extensions).
Interactive Python Console (REPL):
Send current line or selection to console: Ctrl+Enter (Cmd+Enter on Mac). The cursor typically advances to the next line.
Stateful: variables persist within the session.
Supports rich outputs (plots, HTML).
Jupyter Notebooks (.ipynb):
Built-in support for creating and running Jupyter notebooks.
Use cell-based execution (Shift+Enter to run cell and advance/create, Ctrl+Enter to run cell in place).
Data Explorer:
View Pandas DataFrames in a sortable, filterable spreadsheet-like grid.
Access by clicking the table icon next to a DataFrame in the Variables pane or using %view dataframe_name in the console (R: View(dataframe_name)).
Variables Pane: Displays variables in the current Python console's namespace, showing their type and a preview.
Plots Pane: Automatically displays plots generated by libraries like Matplotlib and Seaborn. Includes history navigation and export options.
Help Pane:
Press F1 on a function or object name to view its docstring/documentation.
Output of Python's help() function is also rendered here.
Integrated Terminal:
Access via Terminal > New Terminal or Ctrl+\`` (Cmd+``).
Use for pip/conda package management, running shell scripts, etc.
5. Debugging Python Code

Leverages VS Code's debugging engine.
Setting Breakpoints: Click in the gutter to the left of the line numbers in your .py file.
Launching the Debugger:
Open the "Run and Debug" view (bug icon in the Activity Bar).
Press F5 or select "Start Debugging."
If no configuration exists, Positron may prompt to create a launch.json file or offer a default "Python: Current File" configuration.
Stepping Through Code: Use the debug toolbar: Step Over (F10), Step Into (F11), Step Out (Shift+F11), Continue (F5), Restart (Ctrl+Shift+F5 / Cmd+Shift+F5), Stop (Shift+F5).
Inspecting Variables: The "Variables" section in the Debug view shows local and global variables at the current breakpoint. Hover over variables in the editor to see values.
Debug Console: Interactively execute Python code in the context of the current breakpoint.
6. Version Control with Git & GitHub

Utilizes VS Code's built-in Source Control Management (SCM) features.
Cloning Repositories:
From Welcome Screen: "Clone Repository".
Command Palette (Ctrl+Shift+P / Cmd+Shift+P): "Git: Clone".
Source Control view (branch icon in Activity Bar): "Clone Repository" button if no folder is open.
Source Control View:
Lists changed files (modified, added, deleted).
Click files to view diffs.
Stage changes: Click + icon next to a file or "Stage All Changes".
Committing Changes:
Enter a commit message in the textbox at the top of the Source Control view.
Click the checkmark icon or press Ctrl+Enter (Cmd+Enter) (if configured) to commit staged changes.
Pushing to & Pulling from Remotes (e.g., GitHub):
Use the "..." menu in the Source Control view for "Push", "Pull", "Fetch".
The status bar often shows sync status and provides quick access to push/pull.
Authentication for HTTPS/SSH follows standard Git credential management.
Branching and Merging:
Current branch is shown in the bottom-left status bar; click to switch or create branches.
Command Palette: "Git: Create Branch", "Git: Checkout to...".
Merge conflicts are highlighted in the editor with tools to accept current/incoming changes.
.gitignore: Essential for Python projects. Create one to ignore files like __pycache__/, .venv/, .vscode/ (if not shared), etc.
Useful Extensions (from OpenVSX): "Git Graph" for visualizing commit history, "GitHub Pull Requests and Issues" for deeper GitHub integration.
7. Python-Specific Tools & Customization

Managing Packages:
Terminal: The primary method. Use pip install <package>, conda install <package>, pip freeze > requirements.txt, pip install -r requirements.txt.
"Positron Python Package Manager" Extension: Available on OpenVSX (search for ntluong95.positron-python-package-manager). Provides an RStudio-like UI to view, install/uninstall packages, and manage virtual environments (using uv and pip). Requires uv, pip, and module-inspector in your Python environment.
Linters and Formatters:
Configure via VS Code extensions and settings.json.
Install extensions for Pylint, Flake8 (linters) and Black, autopep8 (formatters) from OpenVSX.
Enable/configure them in Positron's settings (e.g., "python.linting.pylintEnabled": true, "python.formatting.provider": "black").
Remote Development: Experimental support for SSH remote development allows you to use Positron locally while code execution and file storage happen on a remote Linux server.
8. Troubleshooting Common Python Issues

Python Interpreter Not Found/Incorrect Version:
Manually select the correct interpreter: Command Palette > "Python: Select Interpreter".
Check settings.json (workspace and user) for any hardcoded, incorrect python.pythonPath.
IPython Kernel Installation/Detection:
If prompted, allow Positron to install ipykernel.
Or, activate your environment and run pip install ipykernel in the terminal.
Restart the Python kernel in Positron (stop/start from console pane or reload window).
Conda Environment Problems:
Ensure Conda environments are properly initialized and activated.
Update Positron, as environment detection improves with new releases.
If an environment is not listed, you can try adding its Python executable path to the python.defaultInterpreterPath setting or the python.interpreter.inputs.include paths.
Working Directory Issues: The integrated console's working directory defaults to the project root. Use os.getcwd() to check. If scripts expect a different CWD, adjust paths or use os.chdir().
Git Authentication Problems:
Ensure Git is installed and in your system PATH.
For HTTPS, use a Personal Access Token (PAT) as the password. Consider using a Git credential manager.
For SSH, ensure your SSH keys are set up and ssh-agent is running.
UI Glitches/Crashes:
Command Palette > "Developer: Reload Window" to refresh the UI.
Check logs: Command Palette > "Output: Show Output Channels..." (look for "Python Language Pack", "Python X.Y.Z: Kernel", etc.).
Toggle Developer Tools: Command Palette > "Developer: Toggle Developer Tools" (check Console tab for errors).
As a last resort, reset Positron state (refer to official troubleshooting docs for paths to user data directories).
9. Key Settings & Shortcuts

Command Palette: Ctrl+Shift+P (Windows/Linux) / Cmd+Shift+P (Mac) - Access all commands.
Run Line/Selection in Console: Ctrl+Enter / Cmd+Enter.
Open Help: F1 (on a function/object).
Open Folder/Project: Ctrl+K Ctrl+O / Cmd+K Cmd+O.
Open Settings UI: Command Palette > "Preferences: Open Settings (UI)".
RStudio Keymap: If you prefer RStudio shortcuts, search for "RStudio Keymap" in Settings and enable "RStudio > Keymap: Enable".
10. Where to Find More Help

Official Positron Documentation: positron.posit.co (start here for FAQs, guides).
Positron GitHub Repository: github.com/posit-dev/positron (for Discussions, filing Issues, release notes).
VS Code Documentation: code.visualstudio.com/docs (many core editor, Git, and debugging features are identical).
Posit Community Forums: community.posit.co.