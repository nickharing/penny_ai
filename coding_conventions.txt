# Coding Conventions

Standardized guidelines for all project scripts and modules.

## 1. File and Module Layout

* **Filenames**: snake\_case, no spaces or hyphens (e.g., `extract_rois.py`).
* **Modules**: start with a commented header block (see below).

## 2. Module Header

At top of each `.py` file include:

```python
# filename.py
# Purpose: One-sentence summary of module functionality
# Author: <Your Name>
# Date: YYYY-MM-DD
# Dependencies: list of third-party libraries
```

## 3. Docstrings

* Use Google-style or NumPy-style docstrings for all public functions and classes.
* Include `Args:`, `Returns:`, and `Raises:` sections.

## 4. Naming Conventions

* **Variables/Functions**: snake\_case
* **Classes**: PascalCase
* **Constants**: UPPER\_SNAKE\_CASE

## 5. Imports

1. Standard library
2. Third-party
3. Local modules

Separate each group with a blank line; avoid `from module import *`.

## 6. Logging & Error Handling

* Use the `logging` module with a module-level logger:

  ```python
  import logging
  logger = logging.getLogger(__name__)
  ```
* Avoid bare `except:`; catch specific exceptions and re-raise with context.

## 7. Formatting & Linting

* Enforce PEP8 using `flake8`, autoformat with `black` (88â€‘character line length).
* Commit only passing lint checks.

## 8. Type Hints

* Annotate all public functions with type hints; aim for `mypy` compatibility.

## 9. Configuration & Paths

* **All file paths**: defined near top under a marked section:

  ```python
  #---***---*** Paths ***---***---
  BASE_DIR = Path(__file__).parent.parent
  RAW_DATA_DIR = BASE_DIR / "raw_data"
  DATA_DIR = BASE_DIR / "data"
  MODELS_DIR = BASE_DIR / "models"
  #---***---*** End Paths ***---***---
  ```
* Paths configured via YAML (`configs/paths.yaml`) and loaded with `PyYAML`, use only relative paths in code.

## 10. Testing

* Place tests in `/tests/`, follow `pytest` conventions.
* Aim for at least one test per public function.

## 11. Version Control

* Update the `# Version:` field in module header for significant changes.
* Tag commits that correspond to new model releases.
